/-
Copyright (c) 2025 Ya√´l Dillies, Micha≈Ç Mruga≈Ça, Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies, Micha≈Ç Mruga≈Ça, Andrew Yang
-/
import Mathlib.CategoryTheory.Monoidal.Grp_
import Mathlib.CategoryTheory.Monoidal.Yoneda
import Mathlib.Combinatorics.Quiver.ReflQuiver

open CategoryTheory Mon_Class MonoidalCategory ChosenFiniteProducts

section
variable {C : Type*} [Category C] [MonoidalCategory C] [BraidedCategory C]

class CommMon_Class (X : C) [Mon_Class X] where
  mul_comm' : (Œ≤_ X X).hom ‚â´ Œº = Œº := by aesop_cat

namespace CommMon_Class

@[reassoc (attr := simp)]
theorem mul_comm (X : C) [Mon_Class X] [CommMon_Class X] : (Œ≤_ X X).hom ‚â´ Œº = Œº := mul_comm'

end CommMon_Class

end


section

variable {C : Type*} [Category C] [MonoidalCategory C] {M N : Mon_ C}

instance {M N : Mon_ C} (f : M ‚ü∂ N) : IsMon_Hom f.hom := ‚ü®f.2, f.3‚ü©

def Mon_.homMk {M N : C} [Mon_Class M] [Mon_Class N] (f : M ‚ü∂ N) [IsMon_Hom f] :
    Mon_.mk' M ‚ü∂ Mon_.mk' N := ‚ü®f, IsMon_Hom.one_hom, IsMon_Hom.mul_hom‚ü©

end
section

attribute [local instance] monoidOfMon_Class

variable {C : Type*} [Category C] [ChosenFiniteProducts C] {M N : Mon_ C}  [CommMon_Class N.X]

@[reassoc]
lemma Mon_Class.comp_mul {M N O : C} (f g : M ‚ü∂ N) (h : O ‚ü∂ M) [Mon_Class N] :
    h ‚â´ (f * g) = h ‚â´ f * h ‚â´ g :=
  (((yonedaMon.obj (.mk' N)).map (h.op)).hom.map_mul f g)

lemma Mon_Class.one_eq_one {M : C} [Mon_Class M] :
    Œ∑ = (1 : _ ‚ü∂ M) := by
  show _ = _ ‚â´ _
  rw [toUnit_unique (toUnit _) (ùüô _), Category.id_comp]

lemma Mon_Class.mul_eq_mul {M : C} [Mon_Class M] :
    Œº = fst M M * snd _ _ := by
  show _ = _ ‚â´ _
  rw [lift_fst_snd, Category.id_comp]

lemma Mon_.one_eq_one {M : Mon_ C} :
    M.one = 1 :=
  Mon_Class.one_eq_one (M := M.X)

lemma Mon_.mul_eq_mul {M : Mon_ C} :
    M.mul = (fst _ _ * snd _ _) :=
  Mon_Class.mul_eq_mul (M := M.X)

@[reassoc]
lemma Mon_Class.mul_comp {M N O : C} (f g : M ‚ü∂ N) (h : N ‚ü∂ O) [Mon_Class N] [Mon_Class O]
    [IsMon_Hom h] :
    (f * g) ‚â´ h = (f ‚â´ h) * g ‚â´ h :=
  (((yonedaMon.map (Mon_.homMk h)).app (.op M)).hom.map_mul f g)

@[reassoc (attr := simp)]
lemma Mon_Class.one_comp {M N O : C} (h : N ‚ü∂ O) [Mon_Class N] [Mon_Class O]
    [IsMon_Hom h] : (1 : M ‚ü∂ N) ‚â´ h = 1 :=
  ((yonedaMon.map (Mon_.homMk h)).app (.op M)).hom.map_one

@[reassoc (attr := simp)]
lemma Mon_Class.comp_one {M N O : C} (h : M ‚ü∂ N) [Mon_Class O] :
    h ‚â´ (1 : N ‚ü∂ O) = 1 :=
  (((yonedaMon.obj (.mk' O)).map (h.op)).hom.map_one)

instance {M N : C} [Mon_Class N] [CommMon_Class N] : CommMonoid (M ‚ü∂ N) where
  mul_comm f g := by
    show lift _ _ ‚â´ _ = lift _ _ ‚â´ _
    conv_lhs => rw [‚Üê CommMon_Class.mul_comm N]
    rw [‚Üê Category.assoc]
    congr 1
    ext <;> simp

@[reassoc]
lemma Mon_Class.comp_pow {M N O : C} (f : M ‚ü∂ N) (n : ‚Ñï) (h : O ‚ü∂ M) [Mon_Class N] :
    h ‚â´ f ^ n = (h ‚â´ f) ^ n := by
  induction' n with n hn
  ¬∑ simp
  simp only [pow_succ, Mon_Class.comp_mul, hn]

end

namespace Mon_

variable {C : Type*} [Category C] [ChosenFiniteProducts C] {M N : Mon_ C}

attribute [local instance] monoidOfMon_Class

instance Hom.instOne : One (M ‚ü∂ N) where
  one := {
    hom := 1
    one_hom := by simp [Mon_.one_eq_one]
    mul_hom := by simp [Mon_.mul_eq_mul, Mon_Class.comp_mul]
  }

lemma Hom.one_mul : (1 : (M ‚ü∂ N)) = 1 := rfl

variable [CommMon_Class N.X]

instance Hom.instMul : Mul (M ‚ü∂ N) where
  mul f g :=
  { hom := f.hom * g.hom
    one_hom := by simp [Mon_.one_eq_one, Mon_Class.comp_mul, Mon_Class.one_comp]
    mul_hom := by simp [Mon_.mul_eq_mul, Mon_Class.comp_mul, Mon_Class.mul_comp, mul_mul_mul_comm] }

@[simp]
lemma Hom.hom_mul (f g : M ‚ü∂ N) : (f * g).hom = f.hom * g.hom := rfl

instance Hom.instPow : Pow (M ‚ü∂ N) ‚Ñï where
  pow f n :=
  { hom := f.hom ^ n
    one_hom := by simp [Mon_.one_eq_one, Mon_Class.one_comp, Mon_Class.comp_pow]
    mul_hom := by
      simp [Mon_.mul_eq_mul, Mon_Class.comp_mul, Mon_Class.mul_comp, mul_mul_mul_comm,
      Mon_Class.comp_pow, mul_pow]
  }

@[simp]
lemma Hom.hom_pow (f : M ‚ü∂ N) (n : ‚Ñï) : (f ^ n).hom = f.hom ^ n := rfl

instance : CommMonoid (M ‚ü∂ N) :=
  Function.Injective.commMonoid Hom.hom (fun _ _ ‚Ü¶ Hom.ext) rfl (fun _ _ ‚Ü¶ rfl) (fun _ _ ‚Ü¶ rfl)

end  Mon_

namespace Grp_

open ChosenFiniteProducts MonoidalCategory

variable {C : Type*} [Category C] [ChosenFiniteProducts C] {G H : Grp_ C}

instance Hom.instOne : One (G ‚ü∂ H) := inferInstanceAs <| One (G.toMon_ ‚ü∂ H.toMon_)

lemma Hom.one_mul : (1 : (G ‚ü∂ H)) = 1 := rfl

variable [CommMon_Class H.X]

instance Hom.instMul : Mul (G ‚ü∂ H) := inferInstanceAs <| Mul (G.toMon_ ‚ü∂ H.toMon_)

@[simp]
lemma Hom.hom_mul (f g : G ‚ü∂ H) : (f * g).hom = f.hom * g.hom := rfl

instance Hom.instPow : Pow (G ‚ü∂ H) ‚Ñï := inferInstanceAs <| Pow (G.toMon_ ‚ü∂ H.toMon_) ‚Ñï

@[simp]
lemma Hom.hom_pow (f : G ‚ü∂ H) (n : ‚Ñï) : (f ^ n).hom = f.hom ^ n := rfl

instance : CommGroup (G ‚ü∂ H) := sorry
  -- Function.Injective.commGroup Mon_.Hom.hom (fun _ _ ‚Ü¶ Mon_.Hom.ext) rfl (fun _ _ ‚Ü¶ rfl)
  --   (fun _ _ ‚Ü¶ rfl) _

end Grp_
