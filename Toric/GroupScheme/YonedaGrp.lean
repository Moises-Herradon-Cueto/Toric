/-
Copyright (c) 2025 Micha≈Ç Mruga≈Ça, Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Micha≈Ç Mruga≈Ça, Andrew Yang
-/
import Mathlib.Algebra.Category.Grp.Limits
import Mathlib.CategoryTheory.Monoidal.Yoneda
import Mathlib.Combinatorics.Quiver.ReflQuiver
import Toric.Mathlib.CategoryTheory.Monoidal.Grp_

/-!
# Yoneda embedding of `Grp_ C`

We show that group objects are exactly those whose yoneda presheaf is a presheaf of groups,
by constructing the yoneda embedding `Grp_ C ‚•§ C·µí·µñ ‚•§ GrpCat.{v}` and
showing that it is fully faithful and its (essential) image is the representable functors.

-/

open CategoryTheory ChosenFiniteProducts MonoidalCategory Mon_Class Opposite

universe w v u

variable {C : Type*} [Category.{v} C] [ChosenFiniteProducts C]
variable (X : C)

section Grp_

variable (F : C·µí·µñ ‚•§ Grp)

/-- If `X` represents a presheaf of groups, then `X` is a group object. -/
def Grp_Class.ofRepresentableBy (F : C·µí·µñ ‚•§ Grp.{w}) (Œ± : (F ‚ãô forget _).RepresentableBy X) :
    Grp_Class X where
  __ := Mon_ClassOfRepresentableBy X (F ‚ãô (forget‚ÇÇ Grp MonCat)) Œ±
  inv := Œ±.homEquiv.symm (Œ±.homEquiv (ùüô _))‚Åª¬π
  left_inv' := by
    change lift (Œ±.homEquiv.symm (Œ±.homEquiv (ùüô X))‚Åª¬π) (ùüô X) ‚â´
      Œ±.homEquiv.symm (Œ±.homEquiv (fst X X) * Œ±.homEquiv (snd X X)) =
        toUnit X ‚â´ Œ±.homEquiv.symm 1
    apply Œ±.homEquiv.injective
    simp only [Œ±.homEquiv_comp, Equiv.apply_symm_apply]
    simp only [Functor.comp_map, ConcreteCategory.forget_map_eq_coe, map_one, map_mul]
    simp only [‚Üê ConcreteCategory.forget_map_eq_coe, ‚Üê Functor.comp_map, ‚Üê Œ±.homEquiv_comp]
    simp [‚Üê Functor.comp_obj]
  right_inv' := by
    change lift (ùüô X) (Œ±.homEquiv.symm (Œ±.homEquiv (ùüô X))‚Åª¬π) ‚â´
      Œ±.homEquiv.symm (Œ±.homEquiv (fst X X) * Œ±.homEquiv (snd X X)) =
        toUnit X ‚â´ Œ±.homEquiv.symm 1
    apply Œ±.homEquiv.injective
    simp only [Œ±.homEquiv_comp, Equiv.apply_symm_apply]
    simp only [Functor.comp_map, ConcreteCategory.forget_map_eq_coe, map_one, map_mul]
    simp only [‚Üê ConcreteCategory.forget_map_eq_coe, ‚Üê Functor.comp_map, ‚Üê Œ±.homEquiv_comp]
    simp [‚Üê Functor.comp_obj]

attribute [local instance] monoidOfMon_Class

instance Grp_Class.instInv [Grp_Class X] (Y : C) : Inv (Y ‚ü∂ X) where
  inv := (¬∑ ‚â´ Œπ)

/-- If `X` is a group object, then `Hom(Y, X)` has a group structure. -/
@[reducible] def groupOfGrp_Class [Grp_Class X] (Y : C) : Group (Y ‚ü∂ X) where
  __ := monoidOfMon_Class X Y
  div_eq_mul_inv _ _ := rfl
  zpow := zpowRec
  inv_mul_cancel f := by
    change lift (f ‚â´ Œπ) _ ‚â´ Œº = toUnit Y ‚â´ Œ∑
    rw [‚Üê comp_toUnit f, Category.assoc, ‚Üê Grp_Class.left_inv _, comp_lift_assoc, Category.comp_id]

attribute [local instance] groupOfGrp_Class

/- If `X` is a group object, then `Hom(-, X)` is a presheaf of groups. -/
@[simps]
def yonedaGrpObj [Grp_Class X] : C·µí·µñ ‚•§ Grp.{v} where
  obj Y := Grp.of (unop Y ‚ü∂ X)
  map œÜ := Grp.ofHom ((yonedaMonObj X).map œÜ).hom

/-- If `X` is a group object, then `Hom(-, X)` as a presheaf of group is represented by `X`. -/
def yonedaGrpObjRepresentableBy [Grp_Class X] : (yonedaGrpObj X ‚ãô forget _).RepresentableBy X :=
  Functor.representableByEquiv.symm (Iso.refl _)

lemma Grp_ClassOfRepresentableBy_yonedaGrpObjRepresentableBy [Grp_Class X] :
    Grp_Class.ofRepresentableBy X _ (yonedaGrpObjRepresentableBy X) = ‚Äπ_‚Ä∫ := by
  ext
  ¬∑ show toUnit _ ‚â´ Œ∑ = Œ∑
    rw [toUnit_unique (toUnit _) (ùüô _), Category.id_comp]
  ¬∑ show lift (fst X X) (snd X X) ‚â´ Œº = Œº
    rw [lift_fst_snd, Category.id_comp]

/-- If `X` represents a presheaf of groups `F`, then `Hom(-, X)` is isomorphic to `F` as
a presheaf of groups. -/
@[simps!]
def yonedaGrpObjGrp_ClassOfRepresentableBy
    (F : C·µí·µñ ‚•§ Grp.{v}) (Œ± : (F ‚ãô forget _).RepresentableBy X) :
    letI := Grp_Class.ofRepresentableBy X F Œ±
    yonedaGrpObj X ‚âÖ F :=
  letI := Grp_Class.ofRepresentableBy X F Œ±
  NatIso.ofComponents (fun Y ‚Ü¶ MulEquiv.toGrpIso
    { toEquiv := Œ±.homEquiv
      map_mul' :=
  ((yonedaMonObjMon_ClassOfRepresentableBy X (F ‚ãô forget‚ÇÇ Grp MonCat) Œ±).hom.app Y).hom.map_mul})
      (fun œÜ ‚Ü¶ Grp.hom_ext (MonoidHom.ext (Œ±.homEquiv_comp œÜ.unop)))

/-- The yoneda embedding of `Grp_C` into presheaves of groups. -/
@[simps]
def yonedaGrp : Grp_ C ‚•§ C·µí·µñ ‚•§ Grp.{v} where
  obj X := yonedaGrpObj X.X
  map {X‚ÇÅ X‚ÇÇ} œà :=
  { app Y := Grp.ofHom ((yonedaMon.map œà).app Y).hom }

@[reassoc]
lemma yonedaGrp_naturality {X‚ÇÅ X‚ÇÇ : C} [Grp_Class X‚ÇÅ] [Grp_Class X‚ÇÇ]
    (Œ± : yonedaGrpObj X‚ÇÅ ‚ü∂ yonedaGrpObj X‚ÇÇ) {Y‚ÇÅ Y‚ÇÇ : C} (f : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) (g : Y‚ÇÇ ‚ü∂ X‚ÇÅ) :
      Œ±.app _ (f ‚â´ g) = f ‚â´ Œ±.app _ g := congr($(Œ±.naturality f.op) g)

/-- The yoneda embedding for `Grp_C` is fully faithful. -/
noncomputable def yonedaGrpFullyFaithful : yonedaGrp (C := C).FullyFaithful where
  preimage {X‚ÇÅ X‚ÇÇ} Œ± := yonedaMon.preimage (whiskerRight Œ± (forget‚ÇÇ Grp MonCat))
  map_preimage {X‚ÇÅ X‚ÇÇ} Œ± := by
    ext X:3
    exact congr(($(yonedaMon.map_preimage (whiskerRight Œ± (forget‚ÇÇ Grp MonCat))).app X).hom)
  preimage_map := yonedaMon.preimage_map

instance : yonedaGrp (C := C).Full := yonedaGrpFullyFaithful.full
instance : yonedaGrp (C := C).Faithful := yonedaGrpFullyFaithful.faithful

lemma essImage_yonedaGrp :
    yonedaGrp (C := C).essImage = (¬∑ ‚ãô forget _) ‚Åª¬π' setOf Functor.IsRepresentable := by
  ext F
  constructor
  ¬∑ rintro ‚ü®X, ‚ü®Œ±‚ü©‚ü©
    exact ‚ü®X.X, ‚ü®Functor.representableByEquiv.symm (isoWhiskerRight Œ± (forget _))‚ü©‚ü©
  ¬∑ rintro ‚ü®X, ‚ü®e‚ü©‚ü©
    letI := Grp_Class.ofRepresentableBy X F e
    exact ‚ü®Grp_.mk' X, ‚ü®yonedaGrpObjGrp_ClassOfRepresentableBy X F e‚ü©‚ü©

end Grp_
