/-
Copyright (c) 2025 Yaël Dillies, Michał Mrugała. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yaël Dillies, Michał Mrugała
-/
import Mathlib.Algebra.MonoidAlgebra.Defs
import Mathlib.RingTheory.Ideal.Prime
import Mathlib.RingTheory.Ideal.Span
import Toric.DivPairs
import Toric.Mathlib.GroupTheory.MonoidLocalization.Basic

/-!
# Toric ideals

This file defines toric ideals.
-/

namespace AddMonoidAlgebra
variable {M G R : Type*} [AddCommMonoid M] [AddCommGroup G] [CommRing R]
  {f : (⊤ : AddSubmonoid M).LocalizationMap G} {s : AddSubmonoid G} {x : M × M} {I : Ideal R[M]}

variable (f s) in
/-- The monoid ideal corresponding to a submonoid `s` of the Grothendieck group of a monoid is an
ideal generated by differences of monomials whose exponents differ by an element of `s`. -/
def monoidIdeal : Ideal R[M] := .span <| (fun (a, b) ↦ single a 1 - single b 1) '' s.subPairs f

/-- An ideal is toric if it's prime and a group ideal. -/
class IsToricIdeal (I : Ideal R[M])  extends I.IsPrime where
  /-- Use `IsToricIdeal.exists_monoidIdeal_eq` instead. -/
  exists_monoidIdeal_eq' :
    ∃ s : AddSubgroup (AddLocalization (⊤ : AddSubmonoid M)),
      monoidIdeal (AddLocalization.addMonoidOf (⊤ : AddSubmonoid M)) s.toAddSubmonoid = I

variable (f) in
lemma isToricIdeal_iff_exists_monoidIdeal_eq :
    IsToricIdeal I ↔ ∃ s : AddSubgroup G, monoidIdeal f s.toAddSubmonoid = I := sorry

namespace IsToricIdeal

alias ⟨exists_monoidIdeal_eq, of_exists_monoidIdeal_eq⟩ := isToricIdeal_iff_exists_monoidIdeal_eq

end IsToricIdeal
end AddMonoidAlgebra
